import { useEffect, useRef, useState } from 'react';
import { useLocation, useParams, Link, useNavigate } from 'react-router-dom';
import { useQuery } from '@tanstack/react-query';
import './Billing.css'; // Add this CSS file

export default function Billing() {
    const location = useLocation();
    const navigate = useNavigate();
    const { planID, billingType, coachId } = useParams();
    const hasRunRef = useRef(false);
    const [countdown, setCountdown] = useState(10);
    const [showRedirectMessage, setShowRedirectMessage] = useState(false);

    const billingQuery = useQuery({
        queryFn: async () => {
            if (hasRunRef.current) {
                if (billingQuery.error) throw billingQuery.error;
                return billingQuery.data;
            }

            hasRunRef.current = true;
            const url = new URL(window.location.href);
            const billingUrl = `/${planID}/${billingType}/${coachId}/planCallback${url.search}`;
            return validateBilling(billingUrl);
        },
        queryKey: ["validateTicket", planID, billingType, coachId],
        retry: false,
        refetchOnWindowFocus: false,
        refetchOnMount: false,
        refetchOnReconnect: false,
        staleTime: Infinity,
        cacheTime: 0,
    });

    useEffect(() => {
        let timer;
        if (billingQuery.isSuccess || billingQuery.isError) {
            setShowRedirectMessage(true);
            timer = setInterval(() => {
                setCountdown((prev) => {
                    if (prev <= 1) {
                        navigate('/u');
                        return 0;
                    }
                    return prev - 1;
                });
            }, 1000);
        }

        return () => {
            if (timer) clearInterval(timer);
        };
    }, [billingQuery.isSuccess, billingQuery.isError, navigate]);

    return (
        <div className="ticket-wrap">
            {billingQuery.isSuccess && (
                <div className="ticket-place-valid">
                    <div className="message-container success">
                        <h1>{billingQuery.data.message}</h1>
                        <p>The membership has been added, check your mail for more info</p>
                        <Link to="/u">
                            <button className="dashboard-button">Back to dashboard</button>
                        </Link>
                        <p className="note">Note: Ticket code would be needed at the tournament</p>
                    </div>
                </div>
            )}

            {billingQuery.isError && (
                <div className="ticket-place-valid">
                    <div className="message-container error">
                        <h1>{billingQuery.error.message}</h1>
                        <p>Membership payment error</p>
                        <Link to="/u">
                            <button className="dashboard-button">Back to Dashboard</button>
                        </Link>
                    </div>
                </div>
            )}

            {billingQuery.isLoading && (
                <div className="ticket-place-valid">
                    <div className="loading-container">
                        <div className="loader"></div>
                        <p>Processing payment...</p>
                    </div>
                </div>
            )}

            {showRedirectMessage && (
                <div className="redirect-message">
                    <p>Redirecting to dashboard in {countdown} seconds</p>
                    <div className="progress-bar">
                        <div 
                            className="progress-bar-fill" 
                            style={{ width: `${((10 - countdown) / 10) * 100}%` }}
                        ></div>
                    </div>
                </div>
            )}
        </div>
    );
}